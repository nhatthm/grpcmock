// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: resources/protobuf/service.proto

package grpctest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ItemService_GetItem_FullMethodName        = "/grpctest.ItemService/GetItem"
	ItemService_ListItems_FullMethodName      = "/grpctest.ItemService/ListItems"
	ItemService_CreateItems_FullMethodName    = "/grpctest.ItemService/CreateItems"
	ItemService_TransformItems_FullMethodName = "/grpctest.ItemService/TransformItems"
)

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemServiceClient interface {
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Item], error)
	CreateItems(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Item, CreateItemsResponse], error)
	TransformItems(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Item, Item], error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Item)
	err := c.cc.Invoke(ctx, ItemService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Item], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ItemService_ServiceDesc.Streams[0], ItemService_ListItems_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListItemsRequest, Item]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ItemService_ListItemsClient = grpc.ServerStreamingClient[Item]

func (c *itemServiceClient) CreateItems(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Item, CreateItemsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ItemService_ServiceDesc.Streams[1], ItemService_CreateItems_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Item, CreateItemsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ItemService_CreateItemsClient = grpc.ClientStreamingClient[Item, CreateItemsResponse]

func (c *itemServiceClient) TransformItems(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Item, Item], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ItemService_ServiceDesc.Streams[2], ItemService_TransformItems_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Item, Item]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ItemService_TransformItemsClient = grpc.BidiStreamingClient[Item, Item]

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility.
type ItemServiceServer interface {
	GetItem(context.Context, *GetItemRequest) (*Item, error)
	ListItems(*ListItemsRequest, grpc.ServerStreamingServer[Item]) error
	CreateItems(grpc.ClientStreamingServer[Item, CreateItemsResponse]) error
	TransformItems(grpc.BidiStreamingServer[Item, Item]) error
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedItemServiceServer struct{}

func (UnimplementedItemServiceServer) GetItem(context.Context, *GetItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemServiceServer) ListItems(*ListItemsRequest, grpc.ServerStreamingServer[Item]) error {
	return status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedItemServiceServer) CreateItems(grpc.ClientStreamingServer[Item, CreateItemsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateItems not implemented")
}
func (UnimplementedItemServiceServer) TransformItems(grpc.BidiStreamingServer[Item, Item]) error {
	return status.Errorf(codes.Unimplemented, "method TransformItems not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}
func (UnimplementedItemServiceServer) testEmbeddedByValue()                     {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ListItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ItemServiceServer).ListItems(m, &grpc.GenericServerStream[ListItemsRequest, Item]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ItemService_ListItemsServer = grpc.ServerStreamingServer[Item]

func _ItemService_CreateItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ItemServiceServer).CreateItems(&grpc.GenericServerStream[Item, CreateItemsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ItemService_CreateItemsServer = grpc.ClientStreamingServer[Item, CreateItemsResponse]

func _ItemService_TransformItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ItemServiceServer).TransformItems(&grpc.GenericServerStream[Item, Item]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ItemService_TransformItemsServer = grpc.BidiStreamingServer[Item, Item]

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpctest.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _ItemService_GetItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListItems",
			Handler:       _ItemService_ListItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateItems",
			Handler:       _ItemService_CreateItems_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TransformItems",
			Handler:       _ItemService_TransformItems_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "resources/protobuf/service.proto",
}
