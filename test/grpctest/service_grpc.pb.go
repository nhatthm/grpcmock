// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: resources/protobuf/service.proto

package grpctest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemServiceClient interface {
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (ItemService_ListItemsClient, error)
	CreateItems(ctx context.Context, opts ...grpc.CallOption) (ItemService_CreateItemsClient, error)
	TransformItems(ctx context.Context, opts ...grpc.CallOption) (ItemService_TransformItemsClient, error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/grpctest.ItemService/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (ItemService_ListItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ItemService_ServiceDesc.Streams[0], "/grpctest.ItemService/ListItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemServiceListItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ItemService_ListItemsClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type itemServiceListItemsClient struct {
	grpc.ClientStream
}

func (x *itemServiceListItemsClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *itemServiceClient) CreateItems(ctx context.Context, opts ...grpc.CallOption) (ItemService_CreateItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ItemService_ServiceDesc.Streams[1], "/grpctest.ItemService/CreateItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemServiceCreateItemsClient{stream}
	return x, nil
}

type ItemService_CreateItemsClient interface {
	Send(*Item) error
	CloseAndRecv() (*CreateItemsResponse, error)
	grpc.ClientStream
}

type itemServiceCreateItemsClient struct {
	grpc.ClientStream
}

func (x *itemServiceCreateItemsClient) Send(m *Item) error {
	return x.ClientStream.SendMsg(m)
}

func (x *itemServiceCreateItemsClient) CloseAndRecv() (*CreateItemsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateItemsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *itemServiceClient) TransformItems(ctx context.Context, opts ...grpc.CallOption) (ItemService_TransformItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ItemService_ServiceDesc.Streams[2], "/grpctest.ItemService/TransformItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemServiceTransformItemsClient{stream}
	return x, nil
}

type ItemService_TransformItemsClient interface {
	Send(*Item) error
	Recv() (*Item, error)
	grpc.ClientStream
}

type itemServiceTransformItemsClient struct {
	grpc.ClientStream
}

func (x *itemServiceTransformItemsClient) Send(m *Item) error {
	return x.ClientStream.SendMsg(m)
}

func (x *itemServiceTransformItemsClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility
type ItemServiceServer interface {
	GetItem(context.Context, *GetItemRequest) (*Item, error)
	ListItems(*ListItemsRequest, ItemService_ListItemsServer) error
	CreateItems(ItemService_CreateItemsServer) error
	TransformItems(ItemService_TransformItemsServer) error
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemServiceServer struct {
}

func (UnimplementedItemServiceServer) GetItem(context.Context, *GetItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemServiceServer) ListItems(*ListItemsRequest, ItemService_ListItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedItemServiceServer) CreateItems(ItemService_CreateItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateItems not implemented")
}
func (UnimplementedItemServiceServer) TransformItems(ItemService_TransformItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method TransformItems not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctest.ItemService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ListItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ItemServiceServer).ListItems(m, &itemServiceListItemsServer{stream})
}

type ItemService_ListItemsServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type itemServiceListItemsServer struct {
	grpc.ServerStream
}

func (x *itemServiceListItemsServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _ItemService_CreateItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ItemServiceServer).CreateItems(&itemServiceCreateItemsServer{stream})
}

type ItemService_CreateItemsServer interface {
	SendAndClose(*CreateItemsResponse) error
	Recv() (*Item, error)
	grpc.ServerStream
}

type itemServiceCreateItemsServer struct {
	grpc.ServerStream
}

func (x *itemServiceCreateItemsServer) SendAndClose(m *CreateItemsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *itemServiceCreateItemsServer) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ItemService_TransformItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ItemServiceServer).TransformItems(&itemServiceTransformItemsServer{stream})
}

type ItemService_TransformItemsServer interface {
	Send(*Item) error
	Recv() (*Item, error)
	grpc.ServerStream
}

type itemServiceTransformItemsServer struct {
	grpc.ServerStream
}

func (x *itemServiceTransformItemsServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func (x *itemServiceTransformItemsServer) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpctest.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _ItemService_GetItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListItems",
			Handler:       _ItemService_ListItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateItems",
			Handler:       _ItemService_CreateItems_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TransformItems",
			Handler:       _ItemService_TransformItems_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "resources/protobuf/service.proto",
}
