// Code generated by mockery v2.53.3. DO NOT EDIT.

package planner

import (
	mock "github.com/stretchr/testify/mock"
	matcher "go.nhat.io/grpcmock/matcher"

	service "go.nhat.io/grpcmock/service"
)

// Expectation is an autogenerated mock type for the Expectation type
type Expectation struct {
	mock.Mock
}

// Fulfilled provides a mock function with no fields
func (_m *Expectation) Fulfilled() {
	_m.Called()
}

// FulfilledTimes provides a mock function with no fields
func (_m *Expectation) FulfilledTimes() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FulfilledTimes")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// HeaderMatcher provides a mock function with no fields
func (_m *Expectation) HeaderMatcher() matcher.HeaderMatcher {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HeaderMatcher")
	}

	var r0 matcher.HeaderMatcher
	if rf, ok := ret.Get(0).(func() matcher.HeaderMatcher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(matcher.HeaderMatcher)
		}
	}

	return r0
}

// PayloadMatcher provides a mock function with no fields
func (_m *Expectation) PayloadMatcher() *matcher.PayloadMatcher {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PayloadMatcher")
	}

	var r0 *matcher.PayloadMatcher
	if rf, ok := ret.Get(0).(func() *matcher.PayloadMatcher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*matcher.PayloadMatcher)
		}
	}

	return r0
}

// RemainTimes provides a mock function with no fields
func (_m *Expectation) RemainTimes() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemainTimes")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// ServiceMethod provides a mock function with no fields
func (_m *Expectation) ServiceMethod() service.Method {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceMethod")
	}

	var r0 service.Method
	if rf, ok := ret.Get(0).(func() service.Method); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(service.Method)
	}

	return r0
}

// NewExpectation creates a new instance of Expectation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpectation(t interface {
	mock.TestingT
	Cleanup(func())
}) *Expectation {
	mock := &Expectation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
